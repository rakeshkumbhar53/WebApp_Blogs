function formatText(command) {
    document.execCommand(command, false, null);
}

function dropImage(event) {
    event.preventDefault();
    const files = event.dataTransfer.files;

    if (files.length > 0) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgContainer = document.createElement('div');
            imgContainer.style.position = 'relative'; // Make the parent div relative
            imgContainer.style.display = 'inline-block'; // Prevent it from expanding the container

            const imageElement = document.createElement('img');
            imageElement.src = e.target.result;
            imageElement.className = 'draggable-image';
            imageElement.style.maxWidth = '100%';

            // Add resizer
            const resizer = document.createElement('div');
            resizer.className = 'image-resizer';
            resizer.style.display = 'none'; // Initially hidden
            imgContainer.appendChild(imageElement);
            imgContainer.appendChild(resizer);

            // Add remove button (cross)
            const removeBtn = document.createElement('div');
            removeBtn.className = 'remove-btn';
            removeBtn.innerHTML = '&times;'; // HTML for multiplication sign
            removeBtn.title = 'Remove Image';
            removeBtn.style.display = 'none'; // Initially hidden
            removeBtn.onclick = function () {
                imgContainer.remove(); // Remove the image container
            };
            imgContainer.appendChild(removeBtn);

            document.getElementById('editor').appendChild(imgContainer);

            makeImageDraggable(imgContainer);
            makeImageResizable(resizer, imageElement);

            // Toggle visibility of icons on image click
            imageElement.onclick = function (e) {
				e.stopPropagation(); // Prevent triggering drag event
                //imageElement.style.border=imageElement.style.border?"1px dotted blue":"none"
				const isVisible = removeBtn.style.display === 'block';
                removeBtn.style.display = isVisible ? 'none' : 'block';
                resizer.style.display = isVisible ? 'none' : 'block';
            };

            // Hide icons when clicking outside
            document.addEventListener('click', function hideIcons() {
                removeBtn.style.display = 'none';
                resizer.style.display = 'none';
                document.removeEventListener('click', hideIcons); // Remove listener to prevent multiple binds
            });
        };
        reader.readAsDataURL(files[0]);
    }
}

function makeImageDraggable(imageContainer) {
    let isDragging = false;
    let startX, startY, origX, origY;

    imageContainer.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        origX = imageContainer.offsetLeft;
        origY = imageContainer.offsetTop;
        document.body.style.cursor = 'move'; // Change cursor
        e.preventDefault(); // Prevent default behavior
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        document.body.style.cursor = 'default'; // Reset cursor
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            const editor = document.getElementById('editor');
            const editorRect = editor.getBoundingClientRect();
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;

            // Calculate new position
            const newLeft = origX + dx;
            const newTop = origY + dy;

            // Boundary checks
            if (newLeft >= 0 && newLeft + imageContainer.offsetWidth <= editorRect.width) {
                imageContainer.style.left = `${newLeft}px`;
            }
            if (newTop >= 0 && newTop + imageContainer.offsetHeight <= editorRect.height) {
                imageContainer.style.top = `${newTop}px`;
            }
            imageContainer.style.position = 'absolute'; // Set absolute position for dragging
        }
    });
}

function makeImageResizable(resizer, image) {
    let isResizing = false;
    let startX, startY;

    resizer.addEventListener('mousedown', (e) => {
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        document.body.style.cursor = 'se-resize'; // Change cursor
        e.stopPropagation(); // Prevent triggering the drag event
    });

    document.addEventListener('mouseup', () => {
        isResizing = false;
        document.body.style.cursor = 'default'; // Reset cursor
    });

    document.addEventListener('mousemove', (e) => {
        if (isResizing) {
            const newWidth = image.clientWidth + (e.clientX - startX);
            const newHeight = image.clientHeight + (e.clientY - startY);
            image.style.width = `${newWidth}px`;
            image.style.height = `${newHeight}px`;
            startX = e.clientX;
            startY = e.clientY;
        }
    });
}

document.getElementById('submit').addEventListener('click', function () {
	event.preventDefault();
	var PostTitle = document.getElementById("post-title").value;
	var editorContent = document.getElementById('editor').innerHTML;
	
	if(PostTitle=="")
	{
		alert("Please Enter Post Title")
		return false;
	}
	if(editorContent=="")
	{
		alert("Please Enter Post Content")
		return false;
	}
	
 
	editorContent = btoa(editorContent)
	const dataToSend = {post_title:PostTitle,post_content:editorContent}
	$.ajax({
            url: 'write_data.php',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(dataToSend),
            success: function(response) {
                console.log(response);
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error: ', status, error);
            }
        });

	
});

 
 
 
 
 
 
 